#! /usr/bin/env python

import sys
import fileinput
from random import random
from operator import itemgetter


def sample(num, frac, in_stream, out_stream, skip_first=False):
    if num is None and frac is None:
        raise Exception('One of num or frac must be supplied.')
    if num is not None and frac is not None:
        raise Exception('Only one of num or frac may be supplied.')

    if skip_first:
        out_stream.write(next(in_stream))

    if frac is not None:
        for line in in_stream:
            if random() < frac:
                out_stream.write(line)
    if num is not None:
        from heapq import heappush, heappushpop
        heap = []
        for i, line in enumerate(in_stream):
            # We store their original order, to emit them in the order received.
            item = (random(), i, line)
            if len(heap) < num:
                heappush(heap, item)
            else:
                heappushpop(heap, item)
        # order them by their original order
        for item in sorted(heap, key=itemgetter(1)):
            line = item[2]
            out_stream.write(line)


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Sample lines from input.  Must include either --num or --frac.')
    parser.add_argument('-n', '--num', type=int, help='Sample this many lines.')
    parser.add_argument('-f', '--frac', type=float, help='Sample this fraction of lines.')
    parser.add_argument('-1', '--skip-first', action='store_true', help='Let the first line pass through without affecting count.')
    parser.add_argument('file_names', nargs='*', help='Names of files to parse.  If not given, read from stdin.')
    args = parser.parse_args()

    in_stream = fileinput.input(args.file_names)
    out_stream = sys.stdout
    sample(num=args.num, frac=args.frac, in_stream=in_stream, out_stream=out_stream, skip_first=args.skip_first)
