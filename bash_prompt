# vim: ft=sh
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
if [[ -n "$PS1" ]] ; then

    # set variable identifying the chroot you work in (used in the prompt below)
    if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
        debian_chroot=$(cat /etc/debian_chroot)
    fi

    # Set up color prompt
    case "$TERM" in
        xterm-color) color_prompt=yes;;
    esac

    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    force_color_prompt=yes

    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
        else
        color_prompt=
        fi
    fi

    if [ "$color_prompt" = yes ]; then
      BLACK="\[\033[0;30m\]"
      RED="\[\033[0;31m\]"
      GREEN="\[\033[0;32m\]"
      LIME="\[\033[01;32m\]"
      YELLOW="\[\033[0;33m\]"
      BBLUE="\[\033[01;34m\]"
      MAGENTA="\[\e[0;35m\]"
      CYAN="\[\e[0;36m\]"
      WHITE="\[\033[37m\]"
      BOLD="\[\033[1m\]"
      OFF="\[\033[0m\]"
    fi

    # If we've set an explicit override hostname here, show it instead of the
    # real hostname.
    PROMPT_HOST_FILE="$HOME/.ssh/promptHost"
    if [ -f "$PROMPT_HOST_FILE" ]; then
      PROMPT_HOST=`head -1 "$PROMPT_HOST_FILE"`
    else
      PROMPT_HOST='\h'
    fi

    ####
    # Git Prompt

    if [ -f "$GIT_BASH_PROMPT" ]; then
      HAS_GIT_PROMPT=true
      source "$GIT_BASH_PROMPT"
    fi

    GIT_PS1_SHOWDIRTYSTATE=""
    GIT_PS1_SHOWCOLORHINTS=true
    #GIT_PS1_SHOWUNTRACKEDFILES=true
    GIT_PS1_SHOWUPSTREAM="auto"

    # git status --porcelain
    # "M " Modified, in index
    # " M" Modified, not in index
    # "D " git rm
    # " D" Deleted untracked
    # "R " Renamed in index
    # "??" untracked
    # "A " Added file.
    function parse_git_dirty_unstaged {
      git status --porcelain | cut -c2 \
        | sed '/^[[:space:]]*$/d' \
        | sort | uniq -c \
        | tr -d '[[:space:]]' | tr '\n' ' '
    }

    function parse_git_dirty_staged {
      git status --porcelain | cut -c1 \
        | sed '/^[[:space:]]*$/d' \
        | grep -v '?' \
        | sort | uniq -c \
        | tr -d '[[:space:]]' | tr '\n' ' '
    }

    ####
    # Mercurial Prompt
    function parse_hg_dirty {
      # Makes a prompt like "2M 1! 1?" for 2 modified files, 1 removed file, 1 untracked file.
      hg status | cut -d ' ' -f 1 | uniq -c | tr -d '[[:space:]]' | tr '\n' ' '
    }

    ####
    # Build the prompt
    function __prompt() {
      local EXIT="$?"             # This needs to be first
      PS1=""

      CHROOT="${debian_chroot:+($debian_chroot)}"
      USER_HOST="${LIME}\u${GREEN}@${LIME}$PROMPT_HOST"

      if [ -n "$VIRTUAL_ENV" ]; then
        VIRTUAL_ENV_PROMPT=" ${WHITE}${BOLD}{$(basename $VIRTUAL_ENV)}"
      else
        VIRTUAL_ENV_PROMPT=""
      fi

# TODO: Add a NVM prompt

      # Git
      if [ -n "$HAS_GIT_PROMPT" ]; then
        # Are we in a git repo?
        if $(git rev-parse 2> /dev/null); then
          GIT_DIRTY_UNSTAGED=$(parse_git_dirty_unstaged)
          if [ -n "$GIT_DIRTY_UNSTAGED" ]; then
            GIT_DIRTY_UNSTAGED=" "$GIT_DIRTY_UNSTAGED
          fi
          GIT_DIRTY_STAGED=$(parse_git_dirty_staged)
          if [ -n "$GIT_DIRTY_STAGED" ]; then
            GIT_DIRTY_STAGED=" "${GREEN}$GIT_DIRTY_STAGED
          fi
          GIT_PROMPT="${MAGENTA}\$(__git_ps1 ' (%s${GIT_DIRTY_UNSTAGED}${GIT_DIRTY_STAGED}${MAGENTA})')${OFF}"
        else
          GIT_PROMPT=""
        fi
      fi

      # Mercurial
      # This will be blank if outside the repo.  If we have a bookmark, it
      # will start with "*"
      # NB: This is slow.  Each call to hg takes at least 0.2s
      HG_BOOKMARK=$(hg bookmark 2> /dev/null)
      if [ -n "$HG_BOOKMARK" ]; then
        HG_BOOKMARK=$(echo $HG_BOOKMARK | grep '*' | cut -d ' ' -f 3)
        HG_BOOKMARK=${HG_BOOKMARK:-"default"}

        HG_DIRTY=$(parse_hg_dirty)
        if [ -n "$HG_DIRTY" ]; then
          HG_DIRTY=" "$HG_DIRTY
        fi

        HG_PROMPT=" ${MAGENTA}[${HG_BOOKMARK}${HG_DIRTY}]${OFF}"
      else
        HG_PROMPT=""
      fi

      if [ $EXIT != 0 ]; then
          EXIT_PROMPT="${RED}X${EXIT} ${OFF}"      # Add red X if exit code non 0
      else
          EXIT_PROMPT="${GREEN}0 ${OFF}"
      fi

      PS1="${CHROOT}${USER_HOST}${WHITE}:${BBLUE}\w"
      PS1+="$VIRTUAL_ENV_PROMPT"
      PS1+="$GIT_PROMPT"
      PS1+="$HG_PROMPT"
      PS1+="\n$EXIT_PROMPT$BOLD\$$OFF "

      
    }
    
    export PROMPT_COMMAND=__prompt # Use __prompt to generate prompt after each command
    unset color_prompt force_color_prompt

    # If this is an xterm set the title to current dir
    case "$TERM" in
    xterm*|rxvt*)
    #    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\w\a\]$PS1"
        ;;
    *)
        ;;
    esac

fi #endif for $PS1

